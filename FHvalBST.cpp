#ifndef FHVALBSTH#define FHVALBSTH#include "FHBST.h"using namespace std;template <class T>class FHvalNode : public FHNode {private:   int height;   public:   FHvalNode(const T& d = T(), FHNode *l = NULL, FHNode *r = NULL, int height =0 )   : FHNode(d, l, r), height(height) {}   int getHeight() {return height;}   bool setHeight( int height) { if h <1 return false; this->height =h; return true;}};class FHvalBST : public FHBST {protected:   void rotateWithLeft(FHNode<T> * &k2);   void rotateWithRight(FHNode<T> * &k2);   void doubleRotateWithLeft(FHNode<T> * &k2);   void doubleRotateWithRight(FHNode<T> * &k2);   static int heightOf(const FHNode<T> *p) { return p == NULL ? -1 : p->getHeight();}      bool insert (const T &x, FHNode<T> * &node);   bool remove (const T &x, FHNode<T> * &node);public:   bool insert(const T &x) {return insert(x, this->mRoot); }   bool remove(const T &x) {return remove(x, this->mRoot); }};template <class T>void FHvalBST<T>::rotateWithLeft(FHNode<T> * &k2) {   FHNode<T> *k1 = k2->left;   k2->left = k1->right;   k1->right = k2;   k2 = k1;}template <class T>void FHvalBST<T>::rotateWithRight(FHNode<T> * &k2) {   FHNode<T> *k1 = k2->right;   k2->right = k1->left;   k1->left = k2;   k2 = k1;}template <class T>void doubleRotateWithLeft(FHNode<T> * &k2) {      rotateWithRight(k2->left);   rotateWithLeft(k2);}#endif